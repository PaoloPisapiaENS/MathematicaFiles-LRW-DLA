(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
ClearAll[DD];
(*Remove[DD];*)
DD[0]=0;
DD'[(\[Kappa]*A_+B_)C_]:=DD[A*C]/(A*C);
DD'[(\[Kappa]*A_+B_)]:=DD[A]/(A);
(*DD'[a_[x_] b_[y_]]:=1;
DD[a_[x_]*b_[y_]]:=DD[a[x]]*b[y]+DD[b[y]]*a[x]+2\[Del]a[x]*\[Del]b[y];*)


(* ::Input::Initialization:: *)
ClearAll[V];
V[1.]:=1.;
V[1]:=1;
V[0]:=0;
(*V'[DD[a__]]:=DD[a]/a;(*(ToExpression["\[Delta]"<>ToString[a]]);*)*)
V'[a_]:=1;


(* ::Input::Initialization:: *)
ClearAll[\[CapitalSigma]\[Delta]rule];
\[CapitalSigma]\[Delta]rule={\[Delta][a_,b_]^n_/;(!NumericQ[b]&& !MatchQ[b,Subscript[1, __]]):>\[Delta][a,b]^(n-2) \[Delta][a,a],
\[Delta][b_,a_]\[Delta][c_,b_]/;(!NumericQ[b] && !MatchQ[b,Subscript[1, __]]):>\[Delta][c,a],
\[Delta][a_,b_]\[Delta][c_,b_]/;(!NumericQ[b]&& !MatchQ[b,Subscript[1, __]]):>\[Delta][a,c],

\[Delta][a_,a_]/;(MatchQ[a,Subscript[i, __]])/;(a=!=Subscript[i, s]):>Subscript[n, \[Chi]],
\[Delta][a_,a_]/;(MatchQ[a,Subscript[\[Alpha], __]]):>Subscript[n, \[Alpha]]};


(* ::Input::Initialization:: *)
ClearAll[\[Delta]ruleExternal]
(*\[Delta]ruleExternal={\[Delta][a_,a_]/;(NumericQ[a] || a==Subscript[i, s] || MatchQ[a,Subscript[j, __]]|| MatchQ[a,Subscript[jj, __]] || MatchQ[a,Subscript[1, __]]||MatchQ[a,Subscript[k, _]]):>1,
\[Delta][a_,b_]/;(NumericQ[a] ||MatchQ[a,Subscript[k, _]]|| MatchQ[a,Subscript[j, __]]|| MatchQ[a,Subscript[jj, __]] || MatchQ[a,Subscript[1, _]])/;(a=!=b):>0,
\[Delta][a_,b_]/;(NumericQ[b] ||MatchQ[b,Subscript[k, _]]|| MatchQ[b,Subscript[j, __]]|| MatchQ[a,Subscript[jj, __]] || MatchQ[b,Subscript[1, _]])/;(a=!=b):>0 };*)



(* ::Input::Initialization:: *)
Clear[FieldsNamesGenerator];
FieldsNamesGenerator[fields_]:=
FieldsNamesGenerator[fields]=Block[{locFields={},starFields={},deltaFields={},deltaStarFields={},l},

locFields=fields;

For[l=1,l<=Length[locFields],l++,
AppendTo[starFields, ToExpression[ToString[locFields[[l]]] <> "s"]];
AppendTo[deltaFields, ToExpression["\[Delta]"<>ToString[locFields[[l]]] ]];
AppendTo[deltaStarFields,ToExpression["\[Delta]"<> ToString[starFields[[l]]] ]];
];(*End of loop to define the fields*)

Return[{locFields,starFields,deltaFields,deltaStarFields}]
]


(* ::Input::Initialization:: *)
ClearAll[FreeAction];

FreeAction[time_]:=V[Exp[\[Psi]s[Subscript[x, ToExpression["action"<>ToString[ time]]],Subscript[t, time+1]]\[Psi][Subscript[x, ToExpression["action"<>ToString[ time]]],Subscript[t, time]]]];


(* ::Input::Initialization:: *)
ClearAll[V\[Gamma]1,V\[Gamma]1Minus,V\[Gamma]1g\[Chi],V\[Gamma]1g\[Chi]Minus,V\[Gamma]1g\[Psi],V\[Gamma]1g\[Psi]Minus,V\[Gamma]2,V\[Gamma]2Minus,V\[Gamma]2g\[Chi],V\[Gamma]2g\[Chi]Minus,V\[Gamma]2g\[Psi],V\[Gamma]2g\[Psi]Minus,V\[Psi]\[Psi],V\[Psi]\[Chi],V\[Chi]\[Chi],g];

V\[Gamma]1[space_,time_]:= V[\[Gamma]1 \[Phi][space,Subscript[t, time]]\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]\[Psi]s[space,Subscript[t, time+1]]];

V\[Gamma]2[space_,time_]:= V[\[Gamma]2 \[Phi][space,Subscript[t, time]]DD[\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]]];
V\[Gamma]2Minus[space_,time_]:= V[-\[Gamma]2 \[Phi][space,Subscript[t, time]]DD[\[Chi]s[space,1,2,Subscript[t, time]]]\[Phi]s[space,Subscript[t, time+1]]];

V\[Psi]\[Chi][space_,time_]:= V[-g \[Psi][space,Subscript[t, time]]\[Psi]s[space,Subscript[t, time+1]]\[Chi][space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]\[Chi]s[space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]];
V\[Chi]\[Chi][space_,time_]:= V[-g/2 \[Chi][space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]\[Chi][space,Subscript[i, 2],Subscript[\[Alpha], 2],Subscript[t, time]]\[Chi]s[space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]\[Chi]s[space,Subscript[i, 2],Subscript[\[Alpha], 2],Subscript[t, time]]];


(* ::Input::Initialization:: *)
ClearAll[V\[Gamma]1,V\[Gamma]1Minus,V\[Gamma]1g\[Chi],V\[Gamma]1g\[Chi]Minus,V\[Gamma]1g\[Psi],V\[Gamma]1g\[Psi]Minus,V\[Gamma]2,V\[Gamma]2Minus,V\[Gamma]2g\[Chi],V\[Gamma]2g\[Chi]Minus,V\[Gamma]2g\[Psi],V\[Gamma]2g\[Psi]Minus,V\[Psi]\[Psi],V\[Psi]\[Chi],V\[Chi]\[Chi],g];

V\[Gamma]1[space_,time_]:= V[\[Gamma]1 \[Phi][space,Subscript[t, time]]\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]\[Psi]s[space,Subscript[t, time+1]]];
V\[Gamma]1Minus[space_,time_]:= V[-\[Gamma]1 \[Phi][space,Subscript[t, time]]\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]];

V\[Gamma]1g\[Chi][space_,time_]:= V[\[Gamma]1g \[Phi][space,Subscript[t, time]]\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]\[Psi]s[space,Subscript[t, time+1]]\[Chi][space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]\[Chi]s[space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]];
V\[Gamma]1g\[Chi]Minus[space_,time_]:= V[-\[Gamma]1g \[Phi][space,Subscript[t, time]]\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]\[Chi][space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]\[Chi]s[space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]];

V\[Gamma]1g\[Psi][space_,time_]:= V[\[Gamma]1g \[Phi][space,Subscript[t, time]]\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]\[Psi]s[space,Subscript[t, time+1]]\[Psi][space,Subscript[t, time]]\[Psi]s[space,Subscript[t, time+1]]];
V\[Gamma]1g\[Psi]Minus[space_,time_]:= V[-\[Gamma]1g \[Phi][space,Subscript[t, time]]\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]\[Psi][space,Subscript[t, time]]\[Psi]s[space,Subscript[t, time+1]]];


V\[Gamma]2[space_,time_]:= V[\[Gamma]2 \[Phi][space,Subscript[t, time]]DD[\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]]\[Psi]s[space,Subscript[t, time+1]]];
V\[Gamma]2Minus[space_,time_]:= V[-\[Gamma]2 \[Phi][space,Subscript[t, time]]DD[\[Chi]s[space,1,2,Subscript[t, time]]]\[Phi]s[space,Subscript[t, time+1]]];

V\[Gamma]2g\[Chi][space_,time_]:= V[\[Gamma]2g \[Phi][space,Subscript[t, time]]DD[\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]]\[Psi]s[space,Subscript[t, time+1]]\[Chi][space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]\[Chi]s[space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]];
V\[Gamma]2g\[Chi]Minus[space_,time_]:= V[-\[Gamma]2g \[Phi][space,Subscript[t, time]]DD[\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]]\[Chi][space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]\[Chi]s[space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]];

V\[Gamma]2g\[Psi][space_,time_]:= V[\[Gamma]2g \[Phi][space,Subscript[t, time]]DD[\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]]\[Psi]s[space,Subscript[t, time+1]]\[Psi][space,Subscript[t, time]]\[Psi]s[space,Subscript[t, time+1]]];
V\[Gamma]2g\[Psi]Minus[space_,time_]:= V[-\[Gamma]2g \[Phi][space,Subscript[t, time]]DD[\[Chi]s[space,1,2,Subscript[t, time]]\[Phi]s[space,Subscript[t, time+1]]]\[Psi][space,Subscript[t, time]]\[Psi]s[space,Subscript[t, time+1]]];

V\[Psi]\[Psi][space_,time_]:= V[-g/2 \[Psi][space,Subscript[t, time]]\[Psi][space,Subscript[t, time]]\[Psi]s[space,Subscript[t, time+1]]\[Psi]s[space,Subscript[t, time+1]]];
V\[Psi]\[Chi][space_,time_]:= V[-g \[Psi][space,Subscript[t, time]]\[Psi]s[space,Subscript[t, time+1]]\[Chi][space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]\[Chi]s[space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]];
V\[Chi]\[Chi][space_,time_]:= V[-g/2 \[Chi][space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]\[Chi][space,Subscript[i, 2],Subscript[\[Alpha], 2],Subscript[t, time]]\[Chi]s[space,Subscript[i, 1],Subscript[\[Alpha], 1],Subscript[t, time]]\[Chi]s[space,Subscript[i, 2],Subscript[\[Alpha], 2],Subscript[t, time]]];


(* ::Input::Initialization:: *)
ClearAll[WickContractionSpaceVertices];
Options[WickContractionSpaceVertices]={"print"->False,"fields"->FieldsNamesGenerator[{\[Phi],\[Chi],\[Psi]}], "endTime"->1,"#vertices"->10,"\[Delta]rule"->True,"\[Delta]ruleExternal"->True,"\!\(\*SubscriptBox[\(n\), \(\[Chi]\)]\)"->(-1),"\!\(\*SubscriptBox[\(n\), \(\[Alpha]\)]\)"->(0)};

WickContractionSpaceVertices[A_ +B_,OptionsPattern[]]:=WickContractionSpaceVertices[A,"print"->OptionValue["print"],"fields"->OptionValue["fields"], "endTime"->OptionValue["endTime"],"#vertices"->OptionValue["#vertices"],"\[Delta]rule"->OptionValue["\[Delta]rule"],"\[Delta]ruleExternal"->OptionValue["\[Delta]ruleExternal"],"\!\(\*SubscriptBox[\(n\), \(\[Chi]\)]\)"->OptionValue["\!\(\*SubscriptBox[\(n\), \(\[Chi]\)]\)"],"\!\(\*SubscriptBox[\(n\), \(\[Alpha]\)]\)"->OptionValue["\!\(\*SubscriptBox[\(n\), \(\[Alpha]\)]\)"]]+
WickContractionSpaceVertices[B,"print"->OptionValue["print"],"fields"->OptionValue["fields"], "endTime"->OptionValue["endTime"],"#vertices"->OptionValue["#vertices"],"\[Delta]rule"->OptionValue["\[Delta]rule"],"\[Delta]ruleExternal"->OptionValue["\[Delta]ruleExternal"],"\!\(\*SubscriptBox[\(n\), \(\[Chi]\)]\)"->OptionValue["\!\(\*SubscriptBox[\(n\), \(\[Chi]\)]\)"],"\!\(\*SubscriptBox[\(n\), \(\[Alpha]\)]\)"->OptionValue["\!\(\*SubscriptBox[\(n\), \(\[Alpha]\)]\)"]];


WickContractionSpaceVertices[A_?NumericQ,OptionsPattern[]]:=A;

(*################################################################################
									Partition Function                             
##############################################################################*)
(*There are two possible contributions for each field: 1) it is not contracted: \[Chi]->0; 2) it is contracted*)

WickContractionSpaceVertices[V[A_] *B_, OptionsPattern[]]:=Block[{locFields={}, starFields={}, deltaFields={},deltaStarFields={},contributions=0,z,zTemp1,zTemp2,\[Kappa],jj,l,timeIndex},

z=V[A]*B;

locFields=OptionValue["fields"][[1]];
starFields=OptionValue["fields"][[2]];
deltaFields=OptionValue["fields"][[3]];
deltaStarFields=OptionValue["fields"][[4]];


(*Start a loop over time*)
For[timeIndex=1,timeIndex<=(OptionValue["endTime"]),timeIndex++,
z=z*FreeAction[timeIndex];

(*Start of loop over fields*)
For[l=1,l<=Length[locFields],l++,

If[OptionValue["print"],Print["################## Contracting ",locFields[[l]][x_,Subscript[t, timeIndex]]," ##################"]];

(*
(*Start of loop over the number of vertices*)
For[jj=1,jj<=OptionValue["#vertices"],jj++,
z=z/jj;(*Combinatorial factor*)
*)

(*ZEROTH contribution*)
zTemp1=z//.locFields[[l]][___,Subscript[t, timeIndex]]->0;
(*zTemp1=zTemp1//.starFields[[l]][___,Subscript[t, timeIndex]]->0;
If[zTemp1-z=!=0,
contributions=zTemp1;
If[OptionValue["print"],Print["First contribution: ",zTemp1]];
];*)
contributions=zTemp1;
If[OptionValue["print"],Print["Zeroth contribution: ",zTemp1]];

(*FIRST contribution*)
zTemp1=z/. locFields[[l]][a___,Subscript[t, timeIndex]]:>locFields[[l]][a,Subscript[t, timeIndex]]+\[Kappa] *deltaFields[[l]][a,Subscript[t, timeIndex]];
If[zTemp1-z=!=0,
zTemp1=D[zTemp1,\[Kappa]]/.\[Kappa]->0;
];

zTemp2=zTemp1/. starFields[[l]][a___,Subscript[t, timeIndex]]:>starFields[[l]][a,Subscript[t, timeIndex]]+\[Kappa] *deltaStarFields[[l]][a,Subscript[t, timeIndex]];

(*Print["\n",zTemp2];*)

If[zTemp2-zTemp1=!=0,
zTemp1=D[zTemp2,\[Kappa]]/.\[Kappa]->0;
];

(*Print[zTemp1,"\n"];*)

zTemp1=Expand[zTemp1];
zTemp2=zTemp1//.deltaFields[[l]][x_,a___,Subscript[t, timeIndex]]*deltaStarFields[[l]][y_,b___,Subscript[t, timeIndex]](*/;(!NumericQ[a*b]):>*):>Subscript[G, locFields[[l]]][x,y,Subscript[t, timeIndex]]*\[Delta][{a},{b}]; (*G is the propagator*)

zTemp2=zTemp2//.deltaFields[[l]][x_,a___,Subscript[t, timeIndex]]*DD[deltaStarFields[[l]][y_,b___,Subscript[t, timeIndex]]*C_](*/;(!NumericQ[a*b]):>*):>DD[Subscript[G, locFields[[l]]][x,y,Subscript[t, timeIndex]]C]\[Delta][{a},{b}]; (*DD is the laplacian*)

zTemp2=zTemp2//.deltaFields[[l]][x_,a___,Subscript[t, timeIndex]]*DD[deltaStarFields[[l]][y_,b___,Subscript[t, timeIndex]]](*/;(!NumericQ[a*b]):>*):>DD[Subscript[G, locFields[[l]]][x,y,Subscript[t, timeIndex]]]\[Delta][{a},{b}]; (*DD is the laplacian*)

zTemp1=zTemp2/.deltaFields[[l]][___,Subscript[t, timeIndex]]->0/.deltaStarFields[[l]][___,Subscript[t, timeIndex]]->0;


If[contributions-zTemp1=!=0,
contributions+=zTemp1;
If[OptionValue["print"],Print["First contribution: ",zTemp1]];
];


(*SECOND contribution*)
zTemp1=z/.locFields[[l]][a___,Subscript[t, timeIndex]]:>locFields[[l]][a,Subscript[t, timeIndex]]+\[Kappa] *deltaFields[[l]][a,Subscript[t, timeIndex]];
If[zTemp1-z=!=0,
zTemp1=1/2 D[zTemp1,{\[Kappa],2}]/.\[Kappa]->0;
];

zTemp2=zTemp1/. starFields[[l]][a___,Subscript[t, timeIndex]]:>starFields[[l]][a,Subscript[t, timeIndex]]+\[Kappa] *deltaStarFields[[l]][a,Subscript[t, timeIndex]];
If[zTemp2-zTemp1=!=0,
zTemp1=D[zTemp2,{\[Kappa],2}]/.\[Kappa]->0;
];

zTemp1=Expand[zTemp1];

zTemp2=zTemp1//.deltaFields[[l]][x_,a___,Subscript[t, timeIndex]]*deltaStarFields[[l]][y_,b___,Subscript[t, timeIndex]]*deltaFields[[l]][x_,a___,Subscript[t, timeIndex]]*deltaStarFields[[l]][z_,c___,Subscript[t, timeIndex]](*/;(!NumericQ[a*b]):>*):>Subscript[G, locFields[[l]]][x,y,Subscript[t, timeIndex]]Subscript[G, locFields[[l]]][x,z,Subscript[t, timeIndex]]*\[Delta][{a},{b}]\[Delta][{a},{c}]; (*G is the propagator*)
(*The one with the laplacian should not be there*)

zTemp1=zTemp2/.deltaFields[[l]][___,Subscript[t, timeIndex]]->0/.deltaStarFields[[l]][___,Subscript[t, timeIndex]]->0;

If[contributions-zTemp1=!=0,
contributions+=zTemp1;
If[OptionValue["print"],Print["Second contribution: ",zTemp1]];
];

(*THIRD contribution*)
zTemp1=z/.locFields[[l]][a___,Subscript[t, timeIndex]]:>locFields[[l]][a,Subscript[t, timeIndex]]+\[Kappa] *deltaFields[[l]][a,Subscript[t, timeIndex]];
If[zTemp1-z=!=0,
zTemp1=1/(2*3) D[zTemp1,{\[Kappa],3}]/.\[Kappa]->0;
];

zTemp2=zTemp1/. starFields[[l]][a___,Subscript[t, timeIndex]]:>starFields[[l]][a,Subscript[t, timeIndex]]+\[Kappa] *deltaStarFields[[l]][a,Subscript[t, timeIndex]];
If[zTemp2-zTemp1=!=0,
zTemp1=D[zTemp2,{\[Kappa],3}]/.\[Kappa]->0;
];

zTemp1=Expand[zTemp1];

zTemp2=zTemp1//.deltaFields[[l]][x_,a___,Subscript[t, timeIndex]]*deltaStarFields[[l]][y_,b___,Subscript[t, timeIndex]]*deltaFields[[l]][x_,a___,Subscript[t, timeIndex]]*deltaStarFields[[l]][z_,c___,Subscript[t, timeIndex]]*deltaFields[[l]][x_,a___,Subscript[t, timeIndex]]*deltaStarFields[[l]][q_,d___,Subscript[t, timeIndex]](*/;(!NumericQ[a*b]):>*):>Subscript[G, locFields[[l]]][x,y,Subscript[t, timeIndex]]Subscript[G, locFields[[l]]][x,z,Subscript[t, timeIndex]]Subscript[G, locFields[[l]]][x,q,Subscript[t, timeIndex]]*\[Delta][{a},{b}]\[Delta][{a},{c}]\[Delta][{a},{d}]; (*G is the propagator*)
(*The one with the laplacian should not be there*)

zTemp1=zTemp2/.deltaFields[[l]][___,Subscript[t, timeIndex]]->0/.deltaStarFields[[l]][___,Subscript[t, timeIndex]]->0;

If[contributions-zTemp1=!=0,
contributions+=zTemp1;
If[OptionValue["print"],Print["Third contribution: ",zTemp1]];
];

z=contributions;


If[OptionValue["print"],
Print["Overall contributions: ",contributions];
Print["################################################################################################"]];

contributions=0;

(*];(*End of loop over number of vertices*)*)

z=z/.locFields[[l]][___,Subscript[t, timeIndex]]->0;
(*z=z/.starFields[[l]][___,Subscript[t, timeIndex]]->0;*)

z=z//.\[Delta][{a_,c___},{b_,d___}]:>\[Delta][a,b]\[Delta][{c},{d}]//.\[Delta][{},{}]:>1;

If[OptionValue["\[Delta]rule"],z=z//.\[CapitalSigma]\[Delta]rule];
If[OptionValue["\[Delta]ruleExternal"],z=z//.\[Delta][a_,b_]starFields[[l]][c___,a_,d___,Subscript[t, timeIndex]]/;(NumericQ[b] && !NumericQ[a]):>\[Delta][a,b]starFields[[l]][c,b,d,Subscript[t, timeIndex]]/.\[Delta][a_,b_]/;(NumericQ[b] && !NumericQ[a]):>1;
z=z//.\[Delta][a_,b_]starFields[[l]][c___,b_,d___,Subscript[t, timeIndex]]/;(NumericQ[a] && !NumericQ[b]):>\[Delta][a,b]starFields[[l]][c,a,d,Subscript[t, timeIndex]]/.\[Delta][a_,b_]/;(NumericQ[a] && !NumericQ[b]):>1
];

];(*End of loop over fields*)

z=z/.Subscript[n, \[Chi]]->OptionValue["\!\(\*SubscriptBox[\(n\), \(\[Chi]\)]\)"];
z=z/.Subscript[n, \[Alpha]]->OptionValue["\!\(\*SubscriptBox[\(n\), \(\[Alpha]\)]\)"];
z=z/.Subscript[G, \[Psi]][Subscript[x, action],Subscript[x, action],__]->0;

];(*End of loop over time*)

(*z=z/.\[Psi]s[___,Subscript[t, a_]]/;(a<OptionValue["endTime"]+1):>0;*)

Return[z]
];


(* ::Input::Initialization:: *)
ClearAll[DrawFromContraction,x];
Options[DrawFromContraction]={"pointSize"->0.015,"print"->False};

DrawFromContraction[exp_,OptionsPattern[]]:=Module[{terms,i,pureProp, weight, dots,plot},
terms=exp//.F_[A___,Subscript[x, a_],B___]Subscript[G, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>F[A,Subscript[x, b],B]Subscript[G, \[Psi]][Subscript[x, a],Subscript[x, b],Subscript[t, c]]
//.DD[F_[A___,Subscript[x, a_],B___]]Subscript[G, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>DD[F[A,Subscript[x, b],B]]Subscript[G, \[Psi]][Subscript[x, a],Subscript[x, b],Subscript[t, c]]
//.DD[F_[A___,Subscript[x, a_],B___]H_[C___,Subscript[x, a_],D___]]Subscript[G, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>DD[F[A,Subscript[x, b],B]H[C,Subscript[x, b],D]]Subscript[G, \[Psi]][Subscript[x, a],Subscript[x, b],Subscript[t, c]]
//.DD[F_[A___,Subscript[x, d_],B___]H_[C___,Subscript[x, a_],D___]]Subscript[G, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>DD[F[A,Subscript[x, d],B]H[C,Subscript[x, b],D]]Subscript[G, \[Psi]][Subscript[x, a],Subscript[x, b],Subscript[t, c]]
/.Subscript[G, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Subscript[G, \[Psi]][Subscript[x, b],Subscript[x, b],Subscript[t, c]];
terms=List @@ (terms)/.Times->List;

If[OptionValue["print"],
Print[terms]];

(* I want to check if terms is a list of lists (which means that exp conatained a sum, i.e. multiple diagrams)*)
If[!Head[terms[[1]]] ===List,
(* TRUE: if it is not a List of lists *)

pureProp=DeleteElements[terms,{-1,g,\[Gamma]1,\[Gamma]2,\[Gamma]1g,\[Gamma]2g,g^_,\[Gamma]1^_,\[Gamma]2^_,\[Gamma]1g^_,\[Gamma]2g^_}];

weight=Times@@DeleteElements[terms,pureProp];

pureProp=pureProp/.{DD[\[Phi]s[Subscript[x, a_],Subscript[t, c_]] Subscript[F_, \[Chi]][Subscript[x, d_],Subscript[x, b_],Subscript[t, e_]]]:>{\[CapitalDelta][Subscript[x, b-0.1],Subscript[x, b],Subscript[t, e]],Subscript[F, \[Chi]][Subscript[x, d],Subscript[x, b-0.1],Subscript[t, e]],\[Phi]s[Subscript[x, a-0.1],Subscript[t, c]]},
DD[Subscript[F_, \[Phi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]\[Chi]s[Subscript[x, d_],A___,Subscript[t, e_]]]:>{\[CapitalDelta][Subscript[x, b-0.1],Subscript[x, b],Subscript[t, c-1]],Subscript[F, \[Phi]][Subscript[x, a],Subscript[x, b-0.1],Subscript[t, c]],\[Chi]s[Subscript[x, d-0.1],A,Subscript[t, e]]},
DD[\[Chi]s[Subscript[x, a_],A___,Subscript[t, c_]]]:>{\[CapitalDelta][Subscript[x, a-0.1],Subscript[x, a],Subscript[t, c]],\[Chi]s[Subscript[x, a-0.1],A,Subscript[t, c]]},

DD[Subscript[F_, \[Chi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]]:>{\[CapitalDelta][Subscript[x, b-0.1],Subscript[x, b],Subscript[t, c]],Subscript[F, \[Chi]][Subscript[x, a],Subscript[x, b-0.1],Subscript[t, c]]}};
pureProp=Flatten@pureProp;

(*Print[pureProp];*)

pureProp=pureProp/.{Subscript[F_, \[Chi]]^n_[Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{b,c},{a,c},n][[1]],FindArc[{b,c},{a,c},n][[2]],Darker[Green]],
Subscript[F_, \[Chi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{b,c},{a,c},1][[1]],FindArc[{b,c},{a,c},1][[2]],Darker[Green]],

Subscript[F_, \[Phi]]^n_[Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{b,c-1},{a,c},n][[1]],FindArc[{b,c-1},{a,c},n][[2]],Red],
Subscript[F_, \[Phi]][Subscript[x, a_],Subscript[x, 0],Subscript[t, c_]]:>Style[Line[{{a-0.13,c-0.13},{a,c}}],Arrowheads[{0,.03}],Red],
Subscript[F_, \[Phi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{b,c-1},{a,c},1][[1]],FindArc[{b,c-1},{a,c},1][[2]],Red],

Subscript[F_, \[Psi]]^n_[Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{a,c-1},{a,c},n][[1]],FindArc[{a,c-1},{a,c},n][[2]],Blue],
Subscript[F_, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{a,c-1},{a,c},1][[1]],FindArc[{a,c-1},{a,c},1][[2]],Blue],

\[CapitalDelta][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[Line[{{b,c},{a,c}}],Black,Dashed],

\[Chi]s[Subscript[x, a_],__,Subscript[t, c_]]:>Style[Arrow[{{a,c},{a-0.1,c}}],Arrowheads[{0,.03}],Darker[Green]],
\[Phi]s[Subscript[x, a_],Subscript[t, c_]]:>Style[Arrow[{{a,c-1},{a-0.13,c-0.87}}],Arrowheads[{0,.03}],Red],
\[Psi]s[Subscript[x, a_],Subscript[t, c_]]:>Style[Arrow[{{a,c-1},{a,c-0.8}}],Arrowheads[{0,.03}],Blue]};

	dots=Flatten[pureProp//.{Style[Arrow[{{a_,c_},{b_,d_}}],___]/;(IntegerQ[a*b*c*d]):>{Style[{a,c},Disk[{0,0},0.05],Black],Style[{b,d},Disk[{0,0},0.05],Black]},Style[Arrow[{{a_,c_},{b_,d_}}],___]/;(!IntegerQ[a*b*c*d]):>{Style[{b-0.1,d},Disk[{0,0},0.05],White]},
Style[Line[{{b_,c_},{a_,c_}}],Black,Dashed]:>{Style[{a,c},Disk[{0,0},0.05],Black]}}];

plot=ListPlot[dots,
PlotLabel-> weight,
Axes->False,
Frame->False,
Mesh->Full,
AxesOrigin->{1,1}-0.2,
PlotStyle->PointSize[OptionValue["pointSize"]],
Prolog->pureProp];
Print[plot],

(* ELSE: if it is a list of lists *)
For[i=1,i<=Length[terms],i++,

pureProp=DeleteElements[terms[[i]],{-1,g,\[Gamma]1,\[Gamma]2,\[Gamma]1g,\[Gamma]2g,g^_,\[Gamma]1^_,\[Gamma]2^_,\[Gamma]1g^_,\[Gamma]2g^_}];

weight=Times@@DeleteElements[terms[[i]],pureProp];

pureProp=pureProp/.{DD[\[Phi]s[Subscript[x, a_],Subscript[t, c_]] Subscript[F_, \[Chi]][Subscript[x, d_],Subscript[x, b_],Subscript[t, e_]]]:>{\[CapitalDelta][Subscript[x, b-0.1],Subscript[x, b],Subscript[t, e]],Subscript[F, \[Chi]][Subscript[x, d],Subscript[x, b-0.1],Subscript[t, e]],\[Phi]s[Subscript[x, a-0.1],Subscript[t, c]]},
DD[Subscript[F_, \[Phi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]\[Chi]s[Subscript[x, d_],A___,Subscript[t, e_]]]:>{\[CapitalDelta][Subscript[x, b-0.1],Subscript[x, b],Subscript[t, c-1]],Subscript[F, \[Phi]][Subscript[x, a],Subscript[x, b-0.1],Subscript[t, c]],\[Chi]s[Subscript[x, d-0.1],A,Subscript[t, e]]},
DD[\[Chi]s[Subscript[x, a_],A___,Subscript[t, c_]]]:>{\[CapitalDelta][Subscript[x, a-0.1],Subscript[x, a],Subscript[t, c]],\[Chi]s[Subscript[x, a-0.1],A,Subscript[t, c]]},

DD[Subscript[F_, \[Chi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]]:>{\[CapitalDelta][Subscript[x, b-0.1],Subscript[x, b],Subscript[t, c]],Subscript[F, \[Chi]][Subscript[x, a],Subscript[x, b-0.1],Subscript[t, c]]}};
pureProp=Flatten@pureProp;

(*Print[pureProp];*)

pureProp=pureProp/.{Subscript[F_, \[Chi]]^n_[Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{b,c},{a,c},n][[1]],FindArc[{b,c},{a,c},n][[2]],Darker[Green]],
Subscript[F_, \[Chi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{b,c},{a,c},1][[1]],FindArc[{b,c},{a,c},1][[2]],Darker[Green]],

Subscript[F_, \[Phi]]^n_[Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{b,c-1},{a,c},n][[1]],FindArc[{b,c-1},{a,c},n][[2]],Red],
Subscript[F_, \[Phi]][Subscript[x, a_],Subscript[x, 0],Subscript[t, c_]]:>Style[Line[{{a-0.13,c-0.13},{a,c}}],Arrowheads[{0,.03}],Red],
Subscript[F_, \[Phi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{b,c-1},{a,c},1][[1]],FindArc[{b,c-1},{a,c},1][[2]],Red],

Subscript[F_, \[Psi]]^n_[Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{a,c-1},{a,c},n][[1]],FindArc[{a,c-1},{a,c},n][[2]],Blue],
Subscript[F_, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[FindArc[{a,c-1},{a,c},1][[1]],FindArc[{a,c-1},{a,c},1][[2]],Blue],

\[CapitalDelta][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Style[Line[{{b,c},{a,c}}],Black,Dashed],

\[Chi]s[Subscript[x, a_],__,Subscript[t, c_]]:>Style[Arrow[{{a,c},{a-0.1,c}}],Arrowheads[{0,.03}],Darker[Green]],
\[Phi]s[Subscript[x, a_],Subscript[t, c_]]:>Style[Arrow[{{a,c-1},{a-0.13,c-0.87}}],Arrowheads[{0,.03}],Red],
\[Psi]s[Subscript[x, a_],Subscript[t, c_]]:>Style[Arrow[{{a,c-1},{a,c-0.8}}],Arrowheads[{0,.03}],Blue]};

	dots=Flatten[pureProp//.{Style[Arrow[{{a_,c_},{b_,d_}}],___]/;(IntegerQ[a*b*c*d]):>{Style[{a,c},Disk[{0,0},0.05],Black],Style[{b,d},Disk[{0,0},0.05],Black]},Style[Arrow[{{a_,c_},{b_,d_}}],___]/;(!IntegerQ[a*b*c*d]):>{Style[{b-0.1,d},Disk[{0,0},0.05],White]},
Style[Line[{{b_,c_},{a_,c_}}],Black,Dashed]:>{Style[{a,c},Disk[{0,0},0.05],Black]}}];

plot=ListPlot[dots,
PlotLabel-> weight,
Axes->False,
Frame->False,
Mesh->Full,
AxesOrigin->{1,1}-0.2,
PlotStyle->PointSize[OptionValue["pointSize"]],
Prolog->pureProp];
Print[plot];
]
]
]


(* ::Input::Initialization:: *)
ClearAll[FindArc];

FindArc[dot1__,dot2__,order_]:=Module[{sub,px,py,qx,qy,cx,cy,r,radius,centerCoord,c,startAngle,endAngle,circle},

If[order==1,Return[{Arrow[{dot1,dot2}],Arrowheads[{0,.05,0}]}]];

sub={px:>dot1[[1]],py:>dot1[[2]],qx:>dot2[[1]],qy:>dot2[[2]]};

radius=EuclideanDistance[{px,py},{qx,qy}]/(1.07)^order/.sub;
AppendTo[sub,r:>radius];

centerCoord=Solve[{(px-cx)^2+(py-cy)^2==r^2,(qx-cx)^2+(qy-cy)^2==r^2},{cx,cy},Assumptions->r>0];
centerCoord=centerCoord/.sub;

c={cx,cy}/.centerCoord[[Mod[order,2]+1]];


startAngle=ArcTan[px-c[[1]],py-c[[2]]]/.sub;

endAngle=ArcTan[qx-c[[1]],qy-c[[2]]]/.sub;

circle=Circle[c,radius,{startAngle,endAngle}];

Return[{Arrow[circle],Arrowheads[{0,(-1)^Mod[order,2] .05,0}]}];
]


(* ::Input::Initialization:: *)
ClearAll[ToMomentumSpace];
Options[ToMomentumSpace]={"print"->False,"m\[Chi]"->m2\[Chi],"m\[Phi]"->m2\[Phi],"amputateLegs"->{\[Chi]s},"origins"->False};

ToMomentumSpace[exp_,OptionsPattern[]]:=Module[{terms,pureProp,externalLegs,weight,momentumExp,i,j,m2\[Chi],m2\[Phi],ptot},
ptot=0;
m2\[Chi]=OptionValue["m\[Chi]"];
m2\[Phi]=OptionValue["m\[Phi]"];

If[OptionValue["print"],
Print[Style["\t Mass values: ",{Blue}],"m\[Chi] = ",OptionValue["m\[Chi]"],", m\[Phi] = ",OptionValue["m\[Phi]"] ]
];


terms=exp//.F_[A___,Subscript[x, a_],B___]Subscript[G, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>F[A,Subscript[x, b],B]Subscript[G, \[Psi]][Subscript[x, a],Subscript[x, b],Subscript[t, c]]
//.DD[F_[A___,Subscript[x, a_],B___]]Subscript[G, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>DD[F[A,Subscript[x, b],B]]Subscript[G, \[Psi]][Subscript[x, a],Subscript[x, b],Subscript[t, c]]
//.DD[F_[A___,Subscript[x, a_],B___]H_[C___,Subscript[x, a_],D___]]Subscript[G, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>DD[F[A,Subscript[x, b],B]H[C,Subscript[x, b],D]]Subscript[G, \[Psi]][Subscript[x, a],Subscript[x, b],Subscript[t, c]]
//.DD[F_[A___,Subscript[x, d_],B___]H_[C___,Subscript[x, a_],D___]]Subscript[G, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>DD[F[A,Subscript[x, d],B]H[C,Subscript[x, b],D]]Subscript[G, \[Psi]][Subscript[x, a],Subscript[x, b],Subscript[t, c]]
/.Subscript[G, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>Subscript[G, \[Psi]][Subscript[x, b],Subscript[x, b],Subscript[t, c]];
terms=List @@ (terms);

pureProp=DeleteElements[terms,{g,\[Gamma]1,\[Gamma]2,\[Gamma]1g,\[Gamma]2g,g^_,\[Gamma]1^_,\[Gamma]2^_,\[Gamma]1g^_,\[Gamma]2g^_}];

externalLegs= DeleteElements[pureProp,{Subscript[G, _][___],DD[Subscript[G, _][___]],DD[F_[___]Subscript[G, _][___]]}];

weight=Times@@DeleteElements[terms,pureProp];

For[i=1, i<=Length[pureProp],i++,
pureProp[[i]]=pureProp[[i]]/.{Subscript[F_, \[Phi]]^n_[Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>(1/(\[Gamma](s[Subscript[p, i]]+m2\[Phi])))^n \[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c]]\[Delta][-Subscript[p, i],Subscript[x, b],Subscript[t, c-1]],
Subscript[F_, \[Phi]][Subscript[x, a_],Subscript[x, 0],Subscript[t, c_]]:>\[Phi][k]\[Delta][k,Subscript[x, a],Subscript[t, c]],
Subscript[F_, \[Phi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>1/(\[Gamma](s[Subscript[p, i]]+m2\[Phi])) \[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c]]\[Delta][-Subscript[p, i],Subscript[x, b],Subscript[t, c-1]],

Subscript[F_, \[Chi]]^n_[Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>(1/(s[Subscript[p, i]]+m2\[Chi]))^n \[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c]]\[Delta][-Subscript[p, i],Subscript[x, b],Subscript[t, c]],
Subscript[F_, \[Chi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>1/(s[Subscript[p, i]]+m2\[Chi]) \[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c]]\[Delta][-Subscript[p, i],Subscript[x, b],Subscript[t, c]],

Subscript[F_, \[Psi]]^n_[Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>\[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c]]\[Delta][-Subscript[p, i],Subscript[x, b],Subscript[t, c-1]],
Subscript[F_, \[Psi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]:>\[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c]]\[Delta][-Subscript[p, i],Subscript[x, b],Subscript[t, c-1]],

\[Chi]s[Subscript[x, a_],___,Subscript[t, c_]]:>\[Chi]s[Subscript[p, i]]\[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c]],
\[Phi]s[Subscript[x, a_],Subscript[t, c_]]:>\[Phi]s[Subscript[p, i]]\[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c-1]],
\[Psi]s[Subscript[x, a_],Subscript[t, c_]]:>\[Psi]s[Subscript[p, i]]\[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c-1]],

DD[\[Phi]s[Subscript[x, a_],Subscript[t, c_]] Subscript[F_, \[Chi]][Subscript[x, d_],Subscript[x, b_],Subscript[t, e_]]]:>-s[Subscript[p, i]+Subscript[q, i]]\[Phi]s[Subscript[p, i]]\[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c-1]] 1/(s[Subscript[q, i]]+m2\[Chi]) \[Delta][Subscript[q, i],Subscript[x, d],Subscript[t, e]]\[Delta][-Subscript[q, i],Subscript[x, b],Subscript[t, e]],
DD[Subscript[F_, \[Phi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]\[Chi]s[Subscript[x, d_],___,Subscript[t, e_]]]:>-s[Subscript[p, i]+Subscript[q, i]]\[Chi]s[Subscript[q, i]]\[Delta][Subscript[q, i],Subscript[x, d],Subscript[t, e]] 1/(\[Gamma](s[Subscript[p, i]]+m2\[Phi])) \[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c]]\[Delta][-Subscript[p, i],Subscript[x, b],Subscript[t, c-1]],
DD[\[Chi]s[Subscript[x, a_],___,Subscript[t, c_]]]:>-s[Subscript[p, i]]\[Chi]s[Subscript[p, i]]\[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c]],

DD[Subscript[F_, \[Chi]][Subscript[x, a_],Subscript[x, b_],Subscript[t, c_]]]:>-s[Subscript[p, i]] 1/(s[Subscript[p, i]]+m2\[Chi]) \[Delta][Subscript[p, i],Subscript[x, a],Subscript[t, c]]\[Delta][-Subscript[p, i],Subscript[x, b],Subscript[t, c]]};
ptot+=Subscript[p, i];
];


momentumExp = Times@@pureProp;


For[i=1, i<=Length[pureProp],i++,
(*If[OptionValue["origins"],
If[!FreeQ[momentumExp,\[Chi]s[Subscript[p, i]]],
Print[]
]
];*)
If[!FreeQ[momentumExp,Subscript[q, i]],
ptot+=Subscript[q, i]];
];

(*momentumExp=momentumExp*WannaBeDiracDelta[ptot+k];*)

If[OptionValue["print"],
Print[Style["\n\t Expression in momentum space, not yet integrated:\n",{Blue}],momentumExp ]
];


(* VERTEX MOMENTUM CONSERVATION *)

momentumExp=momentumExp//.\[Delta][ Subscript[p, b_],A___]\[Delta][a_,A___]:>\[Delta][a+ Subscript[p, b],A]//.\[Delta][- Subscript[p, b_],A___]\[Delta][a_,A___]:>\[Delta][a- Subscript[p, b],A];
momentumExp=momentumExp//.\[Delta][a_,A___]\[Delta][ Subscript[q, b_],A___]:>\[Delta][a+ Subscript[q, b],A]//.\[Delta][a_,A___]\[Delta][- Subscript[q, b_],A___]:>\[Delta][a- Subscript[q, b],A]/.\[Delta][a_+Subscript[p, b_],A___]:>DiracDelta[a+ Subscript[p, b]]\[DifferentialD]Subscript[p, b];

If[OptionValue["print"],
Print[Style["\n\t Setting up momentum conservation\n",{Blue}],momentumExp ]
];

While[!FreeQ[momentumExp,\[DifferentialD]Subscript[p, a_]],
For[i=1, i<=Length[pureProp],i++,
If[!FreeQ[momentumExp,\[DifferentialD]Subscript[p, i]],
If[FreeQ[momentumExp,DiracDelta[Subscript[p, i]+A__]DiracDelta[Subscript[p, i]+B__]] && FreeQ[momentumExp,DiracDelta[-Subscript[p, i]+A__]DiracDelta[Subscript[p, i]+B__]] &&FreeQ[momentumExp,DiracDelta[-Subscript[p, i]+A__]DiracDelta[-Subscript[p, i]+B__]]  ,
momentumExp=Integrate[momentumExp /.\[DifferentialD]Subscript[p, i]->1,{Subscript[p, i],-\[Infinity],\[Infinity]},GenerateConditions->False],
(*ELSE*)
Continue[];
]
]
]
];


If[OptionValue["print"],
Print[Style["\n\t Implementing momentum conservation at vertices\n",{Blue}],momentumExp ]
];
(*
(* TOTAL MOMENTUM CONSERVATION *)
momentumExp=momentumExp/.WannaBeDiracDelta[a_+Subscript[p, b_]]:>DiracDelta[a+Subscript[p, b]]\[DifferentialD]Subscript[p, b];

If[OptionValue["print"],
Print[Style["\n\t Setting up TOTAL momentum conservation\n",{Blue}],momentumExp ]
];

For[i=1, i<=Length[pureProp],i++,
If[!FreeQ[momentumExp,\[DifferentialD]Subscript[p, i]],
momentumExp=Integrate[momentumExp /.\[DifferentialD]Subscript[p, i]->1,{Subscript[p, i],-\[Infinity],\[Infinity]},GenerateConditions->False];
]
];

If[OptionValue["print"],
Print[Style["\n\t Implementing TOTAL momentum conservation\n",{Blue}],momentumExp ]
];
*)

(* MOMENTA REORDERING *)

j=Length[pureProp];

For[i=1, i<=Length[externalLegs],i++,
If[FreeQ[momentumExp,Subscript[p, i]],
momentumExp=momentumExp/.Subscript[q, i]->Subscript[p, i];
];
];

For[i=1, i<=Length[externalLegs],i++,
While[FreeQ[momentumExp,Subscript[p, i]],
momentumExp=momentumExp/.Subscript[p, j]->Subscript[p, i];
j--;
];
];

If[OptionValue["print"],
Print[Style["\n\t Reordering momenta\n",{Blue}],momentumExp ]
];

(* LEG AMPUTATION *)
If[Length[OptionValue["amputateLegs"]]=!=0,
For[i=1, i<=Length[OptionValue["amputateLegs"]],i++,

momentumExp=momentumExp/.{OptionValue["amputateLegs"][[i]][a_+Subscript[p, b_]]:>OptionValue["amputateLegs"][[i]][a+Subscript[p, b]]WannaBeDiracDelta[a+Subscript[p, b]]\[DifferentialD]Subscript[p, b],OptionValue["amputateLegs"][[i]][a_-Subscript[p, b_]]:>OptionValue["amputateLegs"][[i]][a-Subscript[p, b]]WannaBeDiracDelta[a-Subscript[p, b]]\[DifferentialD]Subscript[p, b]}
/.OptionValue["amputateLegs"][[i]][Subscript[p, b_]]:>OptionValue["amputateLegs"][[i]][Subscript[p, b]]WannaBeDiracDelta[Subscript[p, b]]\[DifferentialD]Subscript[p, b];



(*
momentumExp=momentumExp//.WannaBeDiracDelta[a_]WannaBeDiracDelta[c_+Subscript[p, b_]]/;(!FreeQ[a,Subscript[p, b]]):>WannaBeDiracDelta[a-Subscript[p, b]-c]//.WannaBeDiracDelta[a_]WannaBeDiracDelta[c_-Subscript[p, b_]]/;(!FreeQ[a,Subscript[p, b]]):>WannaBeDiracDelta[a-Subscript[p, b]+c]/.WannaBeDiracDelta[a_+Subscript[p, b_]]:>DiracDelta[a+Subscript[p, b]]\[DifferentialD]Subscript[p, b]/.WannaBeDiracDelta[a_-Subscript[p, b_]]:>DiracDelta[a-Subscript[p, b]]\[DifferentialD]Subscript[p, b];


Print["\n",momentumExp,"\n"];
*)

momentumExp=momentumExp/.WannaBeDiracDelta[a_+c_ Subscript[p, b_]+d_ Subscript[p, e_]](\[DifferentialD]Subscript[p, b_])^2:> WannaBeDiracDelta[a+ c Subscript[p, b]+d Subscript[p, e]]\[DifferentialD]Subscript[p, e] \[DifferentialD]Subscript[p, b]
/.WannaBeDiracDelta[c_ Subscript[p, b_]+d_ Subscript[p, e_]](\[DifferentialD]Subscript[p, b_])^2:> WannaBeDiracDelta[c Subscript[p, b]+d Subscript[p, e]]\[DifferentialD]Subscript[p, e] \[DifferentialD]Subscript[p, b]
/.WannaBeDiracDelta[a_+ Subscript[p, b_]+d_ Subscript[p, e_]](\[DifferentialD]Subscript[p, b_])^2:> WannaBeDiracDelta[a+ Subscript[p, b]+ d Subscript[p, e]]\[DifferentialD]Subscript[p, e] \[DifferentialD]Subscript[p, b]
/.WannaBeDiracDelta[ Subscript[p, b_]+d_ Subscript[p, e_]](\[DifferentialD]Subscript[p, b_])^2:> WannaBeDiracDelta[ Subscript[p, b]+d Subscript[p, e]]\[DifferentialD]Subscript[p, e] \[DifferentialD]Subscript[p, b]
/.WannaBeDiracDelta[a_+ d_ Subscript[p, b_]+ Subscript[p, e_]](\[DifferentialD]Subscript[p, b_])^2:> WannaBeDiracDelta[a+ d Subscript[p, b]+  Subscript[p, e]]\[DifferentialD]Subscript[p, e] \[DifferentialD]Subscript[p, b]
/.WannaBeDiracDelta[ d_ Subscript[p, b_]+ Subscript[p, e_]](\[DifferentialD]Subscript[p, b_])^2:> WannaBeDiracDelta[d Subscript[p, b]+ Subscript[p, e]]\[DifferentialD]Subscript[p, e] \[DifferentialD]Subscript[p, b]
/.WannaBeDiracDelta[a_+ Subscript[p, b_]+ Subscript[p, e_]](\[DifferentialD]Subscript[p, b_])^2:> WannaBeDiracDelta[a+  Subscript[p, b]+  Subscript[p, e]]\[DifferentialD]Subscript[p, e] \[DifferentialD]Subscript[p, b]
/.WannaBeDiracDelta[  Subscript[p, b_]+ Subscript[p, e_]](\[DifferentialD]Subscript[p, b_])^2:> WannaBeDiracDelta[ Subscript[p, b]+ Subscript[p, e]]\[DifferentialD]Subscript[p, e] \[DifferentialD]Subscript[p, b];


If[OptionValue["print"],
Print[Style["\n\t Setting up the amputation ofthe fields ",{Blue}],Style[OptionValue["amputateLegs"][[i]],{Blue}],"\n",momentumExp,"\n"];
];

For[j=1, j<=Length[pureProp],j++,
If[!FreeQ[momentumExp,\[DifferentialD]Subscript[p, j]],

momentumExp=momentumExp /.{WannaBeDiracDelta[a_]/;(!FreeQ[a,Subscript[p, j]] ):>DiracDelta[a],\[DifferentialD]Subscript[p, j]->1}//.DiracDelta[a_]DiracDelta[b_]/;(!FreeQ[a,Subscript[p, j]] && !FreeQ[b,Subscript[p, j]]):>WannaBeDiracDelta[a]DiracDelta[b];
momentumExp=Integrate[momentumExp,{Subscript[p, j],-\[Infinity],\[Infinity]},GenerateConditions->False];
]
];

If[OptionValue["print"],
Print[Style["\n\t Amputating the fields ",{Blue}],Style[OptionValue["amputateLegs"][[i]],{Blue}],Style[" \n",{Blue}],momentumExp ]
];
];
];


If[OptionValue["print"],Print["\n"]];

Return[momentumExp];
]



